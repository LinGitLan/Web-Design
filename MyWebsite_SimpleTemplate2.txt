<!-- This webpage is based on the tutorial/course provided by https://dash.generalassemb.ly/ -->

<!DOCTYPE html>

<head>
  <link href="/normalize.css" rel="stylesheet">
  <style>
    header {
      text-align: center;
      color: white;
      background: url("http://i.imgur.com/OXKV2We.jpg");
      background-size: cover;
    }
/* To change a link's color, it's necessary to set it explicitly in a{}. Unlike headings and paragraphs, it won't inherit from its parents. */
    a {
      color: white;
    }
/* Margin creates space on the outside of an element, padding on the inside */
    h1 {
      font-size: 70px;
      margin: 30px;
    }
    img {
      margin: 40px 0px 0px 10px;
      border: 7px solid orange;
      border-radius: 20px;
    }
/* The links would be all a bit off-center if I wouldn't give it some padding in ul{}. This is due to default settings of lists' bullet points. The padding values go like this: top, right, bottom, left. */
    ul {
      padding: 10px;
      font-weight: bold;
      background: rgba(0, 0, 0, 0.5);
    }
/* The display property in li{} makes the links all line up next to each other and unlike block property, it creates no line breaks and it doesn't take up the whole width of the page. */
    li{
      display: inline;
      padding: 0px 10px 0px 10px;
    }
/* Using "max-width" instead of "width" means the article elements can be smaller than 500px but not any larger - good for resizing the browser. Margin "0 auto" has 0 margin on the top and bottom, and "auto" margin on the left and right - this centres the content */
    article{
      max-width: 500px;
      padding: 20px;
      margin: 0 auto;
    }  
/* A media query, "@media", allows to set CSS styles that only activate when the browser is a certain width. It basically sets a condition and when that condition is true, the CSS inside the curly brackets gets activated, e.g. the following makes the heading font smaller when the browser is small and the navigation links should sit on top of each other rather than inline. */
    @media (max-width: 500px) {
      h1 {
        font-size: 40px;
      }
      ul {
        font-weight: normal;
      }
      li{
        display: block;
        padding: 1px;
      }
    }  
  </style>
</head>

<body>
<header>
  <img src="http://i.imgur.com/3lYxz1I.jpg">
  <h1>My Blog</h1>
  <ul>
    <li><a href="#">About Me</a></li>
    <li><a href="#">Good Ideas</a></li>
    <li><a href="#">Not That Good Ideas</a></li>
  </ul> 
</header>
<article>
<h2>Blog post 1</h2>
<p>Cum petentium complectitur conclusionemque ut. Usu ad nibh omnes assentior, oblique commune disputationi vix et. Te discere delectus volutpat nam, liber ridens facilisi mei at. Ex velit mundi integre vix, ferri atomorum nam te. Sit lorem eruditi maluisset ei, prima nobis aperiri vix at. Ei mel albucius sapientem constituto, homero aliquam mei ad, mel ea ubique eruditi.</p>
<button>Like</button>
</article>
<article>
<h2>Blog post 2</h2>
<p>At exerci discere explicari sea, ne enim oratio deseruisse pri. Sed ne consul dissentias appellantur. Sea et consul vivendo senserit. Ut elitr sanctus volutpat per.</p>
<button>Like</button>
</article>
<article>
<h2>Blog post 3</h2>
<p>His dicunt eloquentiam suscipiantur at, ei nam deleniti consequat philosophia, augue dolore bonorum sed eu. Cum no vidit tation assueverit. Id pro nostro copiosae. Ea omnis discere mel.</p>
<button>Like</button>
</article>
<script>$("button").on("click", function(){alert("A button was clicked!")})</script>
</body>

<!-- ADDITIONAL COMMENTS -->
<!-- The <link> tag lets include CSS from an external file rather than keeping it all written out in a HTML file. However, this is just an example that doesn't work. The attribute href is a URL where the CSS file lives. The CSS file "normalize.css" makes browsers render all elements in line with modern standards no matter what browser I use so it's a good idea to include it in all the web projects. The rel attribute should always be set to "stylesheet". -->
<!-- The <header> tag is a container that holds other elements, kind of like <body>, but specifically for a website's header-->
<!--The <ul> tag stands for unordered list and is used to make a navigation bar which basically is just a list of links, see <li> tags. The <a> tag is used to make a link to another page, <a> stands for anchor link and has an attribute href (hypertext reference) which controls the URL. -->
<!-- The <article> tag lets group together multiple HTML elements that form a single piece of content. -->
<!-- The <script> tag includes Javascript on the site. In this case, we use Javascript to listen for the click event on the button element, i.e. the click on the "Like" button, though it won't save any data yet - we'd need to program a back-end server (with frameworks like Ruby on Rails) to do that - but the button reacts when clicked. The code "$("button").on("click", function(){alert("clicked!")})" uses jQuery, a popular library of useful javascript code that, among other things, makes it easy to select elements and listen for events. The basic format of the code is "$(selector/element-in-question).on(event-type, thing-to-be-done)". The on() function sets up an event listener for the button element and takes two parameters/arguments: 1) type of event to listen to (click, hover, scroll, etc.) which must be in quotes as it is a string/text. 2) function containing the thing to be done when the event happens. -->
